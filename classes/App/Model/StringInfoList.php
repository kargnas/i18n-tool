<?php
	/**
	 * User: kars
	 * Date: 2014. 9. 30. 오후 5:50
	 */

	namespace App\Model;

	use App\Exception\UnknownExportTypeException;
	use App\LocalizationDictionary\StringDictionary;
	use App\Util\ExcelExporter;
	use App\Util\Logger;

	class StringInfoList extends Base
	{
		public $locale, $type;

		/** @var StringInfo[] */
		public $items = array();

		/**
		 * @param array $json {'items': []}
		 */
		function __construct(array $json = array()) {
			$self         = $this;
			$this->locale = $json['locale'];
			$this->type   = $json['type'];

			if ($json['items']) {
				$this->items = $this->makeList($json['items'], function ($json) use ($self) {
					return new StringInfo($json, $self);
				});
			}
		}

		public function addStringInfo(StringInfo $stringInfo) {
			$idx = $this->getIndexOfKey($stringInfo->key->toString());
			if ($idx !== false) {
				$this->items[$idx] = $stringInfo;
			}

			// 위에서 못찾았을 경우 새 데이터
			$this->items[] = $stringInfo;
		}

		public function getIndexOfKey($key) {
			foreach ($this->items as $i => $item) {
				if ($item->key->toString() == $key)
					return $i;
			}

			return false;
		}

		public function hasKey($key) {
			return ($this->getIndexOfKey($key) !== false);
		}

		// 안드로이드용
		/**
		 * @return StringInfo[]
		 */
		protected function getItemsNotStringArray() {
			$items = array();
			foreach ($this->items as $info) {
				if (!$info->isArrayString())
					$items[] = $info;
			}
			return $items;
		}

		/**
		 * @return StringInfo[][]
		 */
		protected function getItemsListStringArray() {
			$assocItems = array();
			foreach ($this->items as $info) {
				if ($info->isArrayString())
					$assocItems[$info->getArrayStringKey()][$info->getArrayStringIndex()] = $info;
			}

			$items = array();
			foreach ($assocItems as $assocItem) {
				sort($assocItem);
				$items[] = $assocItem;
			}
			return $items;
		}

		public function findNewKeys(StringInfoList $newList) {
			$newKeys = array();
			foreach ($newList->getKeys() as $key) {
				if (!$this->hasKey($key)) {
					$newKeys[] = $key;
				}
			}
			return $newKeys;
		}

		/**
		 * 아이템 들을 모두 Array 형식으로 컨버팅
		 *
		 * @return array
		 */
		public function getJsonItems() {
			$json = array();
			foreach ($this->items as $item) {
				$json[] = $item->getJson();
			}
			return $json;
		}

		public function getJson() {
			return array(
				'locale' => $this->locale,
				'type'   => $this->type,
				'items'  => $this->getJsonItems()
			);
		}

		public function getExcelExporter() {
			$exporter           = new ExcelExporter($this);
			$exporter->fileName = "[" . $this->locale . "] " . $this->type . ".xls";
			return $exporter;
		}

		/**
		 * @param $type
		 *
		 * @return string
		 *
		 * @throws UnknownExportTypeException
		 */
		public function getExportString($type) {
			$content = '';

			switch ($type) {
				case StringDictionary::RESOURCE_TYPE_IPHONE:
					$content .= "// 이 파일은 번역 툴에 의해 생성되었습니다.\n";
					$content .= "// This file was generated by Localization Tool.\n";

					foreach ($this->items as $info) {
						if ($info->isNull()) continue;

						$content .= "\"" . addslashes($info->key) . "\"";
						$content .= " = ";
						$content .= "\"" . $info->getEscapeString(StringInfo::STRING_ESCAPE_XCODE) . "\";";
						$content .= "\n";
					}
					return trim($content);
					break;

				case StringDictionary::RESOURCE_TYPE_ANDROID:
					$content = '';
					$content .= '<?xml version="1.0" encoding="utf-8" standalone="no"?>' . PHP_EOL;

					$content .= "<!--\n";
					$content .= "\t이 파일은 번역 툴에 의해 생성되었습니다.\n";
					$content .= "\tThis file was generated by Localization Tool.\n";
					$content .= "-->\n";

					$content .= "<resources>\r\n";
					foreach ($this->getItemsNotStringArray() as $info) {
						if ($info->isNull()) continue;

						$content .= "\t<string name=\"" . addslashes($info->key) . "\">";
						$content .= $info->getEscapeString(StringInfo::STRING_ESCAPE_ANDROID);
						$content .= "</string>";
						$content .= "\n";
					}

					$content .= "\n\t<!-- String Array -->\n";

					foreach ($this->getItemsListStringArray() as $items) {
						$content .= "\t<string-array name=\"" . addslashes($items[0]->getArrayStringKey()) . "\">\n";
						foreach ($items as $info) {
							$content .= "\t\t<item>";
							$content .= $info->getEscapeString(StringInfo::STRING_ESCAPE_ANDROID);
							$content .= "</item>";
							$content .= "\n";
						}
						$content .= "\t</string-array>\n";
					}
					$content .= "</resources>";
					return $content;
					break;

				case StringDictionary::RESOURCE_TYPE_SERVER:
					$content .= "// 이 파일은 번역 툴에 의해 생성되었습니다.\n";
					$content .= "// This file was generated by Localization Tool.\n";

					foreach ($this->items as $info) {
						if ($info->isNull()) continue;

						$content .= "" . addslashes($info->key) . "";
						$content .= " = ";
						$content .= "" . $info->getEscapeString(StringInfo::STRING_ESCAPE_PROPERTIES) . "";
						$content .= "\r\n";
					}
					return trim($content);
					break;

				case StringDictionary::RESOURCE_TYPE_EXCEL:
					$exporter = $this->getExcelExporter();
					return $exporter->getBody();
					break;

				default:
					throw new UnknownExportTypeException("`{$type}` is unknown export type!");
			}
		}

		public function printExportString($type) {
			switch ($type) {
				case StringDictionary::RESOURCE_TYPE_IPHONE:
					echo static::getExportString($type);
					break;

				case StringDictionary::RESOURCE_TYPE_EXCEL:
					$exporter = $this->getExcelExporter();
					$exporter->printHeader();
					echo static::getExportString($type);
					break;

				default:
					throw new UnknownExportTypeException("`{$type}` is unknown export type!");
			}
		}

		static function ByLocaleAndType($locale, $type) {
			$store        = new \App\DataStore();
			$stringsArray = $store->getStrings($locale, $type);

			$json = array(
				'locale' => $locale,
				'type'   => $type,
				'items'  => $stringsArray
			);

			$self = new static($json);
			return $self;
		}

		/**
		 * @param $locale
		 * @param $type
		 * @param $key
		 *
		 * @return static
		 */
		static function ByLocaleAndTypeAndKey($locale, $type, $key) {
			$store       = new \App\DataStore();
			$stringArray = $store->getString($locale, $type, $key);
			if (!$stringArray) return null;

			$json = array(
				'locale' => $locale,
				'type'   => $type,
				'items'  => array($stringArray)
			);

			$self = new static($json);
			return $self;
		}

		static function BaseByType($type) {
			return static::ByLocaleAndType('ko_KR', $type);
		}

		static function InsertNewString($locale, $type, $key, $string, $keyModified = 1) {
			$store = new \App\DataStore();
			$store->setKey($type, $key, $keyModified);
			$store->deleteString($locale, $type, $key);
			$store->setString($locale, $type, $key, $string);
		}

		static function DeleteString($locale, $type, $key) {
			$store = new \App\DataStore();
			$store->deleteString($locale, $type, $key);
		}

		static function ClearByType($type) {
			$store = new \App\DataStore();
			$store->clear($type);
		}

		static function ClearModifiedByType($type) {
			$store = new \App\DataStore();
			$store->clearModified($type);
		}

		public function getKeys() {
			$keys = array();
			foreach ($this->items as $item) {
				$keys[] = $item->key->toString();
			}
			return $keys;
		}
	}